{"version":3,"sources":["uni-app:///main.js","webpack:///D:/HBuilderX.4.65.2025051206/翎心/pages/intervene/chat.vue?e186","webpack:///D:/HBuilderX.4.65.2025051206/翎心/pages/intervene/chat.vue?e1da","webpack:///D:/HBuilderX.4.65.2025051206/翎心/pages/intervene/chat.vue?2a3b","webpack:///D:/HBuilderX.4.65.2025051206/翎心/pages/intervene/chat.vue?1282","uni-app:///pages/intervene/chat.vue","webpack:///D:/HBuilderX.4.65.2025051206/翎心/pages/intervene/chat.vue?8542","webpack:///D:/HBuilderX.4.65.2025051206/翎心/pages/intervene/chat.vue?353a"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","data","messages","inputText","isSending","isTyping","scrollIntoView","msgIdPrefix","sessionId","currentSessionName","sessions","showSessionPopup","isLoadingHistory","favoriteMessages","showEmojiPicker","currentPersonality","showPersonalityPopup","personalities","emojiList","onLoad","console","chatStorage","personalityConfig","onShow","tabBarManager","onUnload","methods","loadSessions","sessionsData","id","name","createdAt","lastMessageAt","messageCount","currentSession","saveSessions","uni","showSessionList","switchSession","session","title","icon","duration","handleNewSession","content","placeholderText","editable","confirmText","success","createNewSession","newSession","renameSession","deleteSession","confirmColor","res","index","defaultSession","formatSessionTime","loadHistoryMessages","role","timestamp","saveMessage","updateSessionInfo","saveAllMessages","clearCurrentSession","handleLongPress","itemList","copyMessage","fail","toggleFavoriteMessage","deleteMessage","saveFavorites","loadFavorites","toggleEmojiPicker","insertEmoji","sendMessage","text","sensitiveCheck","showCancel","cancelText","proceedSendMessage","userMessage","sendStatus","hasSensitive","isCrisis","messageIndex","showPersonalitySelector","selectPersonality","isSystem","sendToAI","messagesToSend","filter","concat","uniCloud","personality","stream","aiContent","resendMessage","message","simulateAIResponse","setTimeout","response","resolve","addAIMessage","aiMessage","scrollToBottom","getMsgId","canRevoke","revokeMessage","handleClearChat","showRatingDialog","rateMessage","submitRating","feedback","messageContent","messageTimestamp","rating","askForDetailedFeedback"],"mappings":"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A;MAAA;IACA;IAEA;AACA;AACA;IACAuB;MAAA;MACAP;QACAI;QACAI;QACAC;QACAC;QACAC;QACAC;UACA;YAAA;YACA;YACA;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC;kBACArB;kBACAC;kBACAC;kBACAC;kBACAC;gBACA;gBAEA;gBACA;;gBAEA;gBAAA;gBAAA,OACA;cAAA;gBAEAb;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IAEA;AACA;AACA;IACA+B;MAAA;MACAf;QACAI;QACAI;QACAC;QACAC;QACAC;QACAC;UACA;YACA;YACA;cACAT;cACA;gBACA;cACA;cACA;cAEAH;gBACAI;gBACAC;cACA;cAEArB;YACA;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAgC;MAAA;MACAhB;QACAI;QACAI;QACAG;QACAM;QACAL;UAAA;YAAA;YAAA;cAAA;gBAAA;kBAAA;oBAAA,KACAM;sBAAA;sBAAA;oBAAA;oBACA;oBACAC;sBAAA;oBAAA;oBACA;sBACA;sBACA;oBACA;;oBAEA;oBAAA;oBAAA,OACAlC;kBAAA;oBAAA,MAGAkB;sBAAA;sBAAA;oBAAA;oBACAiB;sBAAA;oBAAA;oBAAA,KACAA;sBAAA;sBAAA;oBAAA;oBAAA;oBAAA,OACA;kBAAA;oBAIApB;sBACAI;sBACAC;oBACA;oBAEArB;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAEA;UAAA;YAAA;UAAA;UAAA;QAAA;MACA;IACA;IAEA;AACA;AACA;IACAqC;MACA;MACA;MAEA;MACA;MACA;MAEA;QACA;MACA;QACA;MACA;QACA;MACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEA;gBAAA;gBAAA,OACArC;cAAA;gBAAAnB;gBAEA;kBACA;kBACA;oBAAA;sBACAyD;sBACAf;sBACAgB;oBACA;kBAAA;kBAEAxC;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;gBAAA;gBAEA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;AACA;AACA;IACAyC;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEAxC;kBACAsC;kBACAf;kBACAgB;gBACA;cAAA;gBAEA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAxC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;AACA;AACA;IACA0C;MAAA;MACA;QAAA;MAAA;MACA;QACAvB;QACAA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAwB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA1C;cAAA;gBACAD;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;AACA;AACA;IACA4C;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEA3C;cAAA;gBACA;;gBAEA;gBACA;gBAEAe;kBACAI;kBACAC;gBACA;gBAEArB;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAA;gBACAgB;kBACAI;kBACAC;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEA;AACA;AACA;IACAwB;MAAA;MACA;MACA;MAEA7B;QACA8B;QACAlB;UACA;UAEA;YACA;cACA;cACA;cACA;YACA;cACA;cACA;cACA;YACA;cACA;cACA;cACA;UAAA;QAEA;MACA;;MAEA;MACAZ;QACAY;UACA5B;QACA;MACA;IACA;IAEA;AACA;AACA;IACA+C;MACA/B;QACAnC;QACA+C;UACAZ;YACAI;YACAC;YACAC;UACA;UACAtB;QACA;QACAgD;UACAhD;UACAgB;YACAI;YACAC;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACA4B;MACA;;MAEA;MACA;;MAEA;MACA;QACA;QACA;UACAzB;UACAe;UACAC;UACApD;QACA;QAEA4B;UACAI;UACAC;UACAC;QACA;QACAtB;MACA;QACA;QACA,+CACA;UAAA;QAAA,EACA;QACA;UACA;QACA;QAEAgB;UACAI;UACAC;UACAC;QACA;QACAtB;MACA;;MAEA;MACA;;MAEA;MACA;IACA;IAEA;AACA;AACA;IACAkD;MAAA;MACAlC;QACAI;QACAI;QACAI;UACA;YACA;YACA;YAEAZ;cACAI;cACAC;cACAC;YACA;YACAtB;UACA;QACA;MACA;IACA;IAEA;AACA;AACA;IACAmD;MACA;QACAnC;QACAhB;MACA;QACAA;MACA;IACA;IAEA;AACA;AACA;IACAoD;MACA;QACA;QACA;UACA;UACApD;QACA;MACA;QACAA;MACA;IACA;IAEA;AACA;AACA;IACAqD;MACA;MACArD;IACA;IAEA;AACA;AACA;IACAsD;MACA;MACA;MACA;MACAtD;IACA;IAEA;IACAuD;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC;gBAAA,MACA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAEA;gBACAC,iEAEA;gBAAA,KACAA;kBAAA;kBAAA;gBAAA;gBACAzC;kBACAI;kBACAI;kBACAG;kBACAM;kBACAyB;kBACA9B;oBACA;oBACA;kBACA;gBACA;gBAAA;cAAA;gBAAA,KAKA6B;kBAAA;kBAAA;gBAAA;gBACAzC;kBACAI;kBACAI;kBACAG;kBACAgC;kBACA/B;oBACA;sBACA;oBACA;kBACA;gBACA;gBAAA;cAAA;gBAIA;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IAEA;AACA;AACA;IACAgC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA;gBACAC;kBACAtB;kBACAf;kBACAgB;kBACAsB;kBAAA;kBACAC;kBACAC;gBACA,GAEA;gBACA;gBACAC;gBACA;gBACA;;gBAEA;gBAAA;gBAAA,OACA;cAAA;gBAAA;gBAAA,OAGA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACA;IAEA;AACA;AACA;IACAC;MACA;IACA;IAEA;AACA;AACA;IACAC;MACA;Q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","file":"pages/intervene/chat.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js';\nimport Vue from 'vue'\nimport Page from './pages/intervene/chat.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./chat.vue?vue&type=template&id=ccbcd004&scoped=true&\"\nvar renderjs\nimport script from \"./chat.vue?vue&type=script&lang=js&\"\nexport * from \"./chat.vue?vue&type=script&lang=js&\"\nimport style0 from \"./chat.vue?vue&type=style&index=0&id=ccbcd004&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ccbcd004\",\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/intervene/chat.vue\"\nexport default component.exports","export * from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./chat.vue?vue&type=template&id=ccbcd004&scoped=true&\"","var components\ntry {\n  components = {\n    uIcon: function () {\n      return import(\n        /* webpackChunkName: \"uni_modules/uview-ui/components/u-icon/u-icon\" */ \"@/uni_modules/uview-ui/components/u-icon/u-icon.vue\"\n      )\n    },\n    uPopup: function () {\n      return import(\n        /* webpackChunkName: \"uni_modules/uview-ui/components/u-popup/u-popup\" */ \"@/uni_modules/uview-ui/components/u-popup/u-popup.vue\"\n      )\n    },\n  }\n} catch (e) {\n  if (\n    e.message.indexOf(\"Cannot find module\") !== -1 &&\n    e.message.indexOf(\".vue\") !== -1\n  ) {\n    console.error(e.message)\n    console.error(\"1. 排查组件名称拼写是否正确\")\n    console.error(\n      \"2. 排查组件是否符合 easycom 规范，文档：https://uniapp.dcloud.net.cn/collocation/pages?id=easycom\"\n    )\n    console.error(\n      \"3. 若组件不符合 easycom 规范，需手动引入，并在 components 中注册该组件\"\n    )\n  } else {\n    throw e\n  }\n}\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  var m0 = _vm.getPersonalityConfig(_vm.currentPersonality)\n  var m1 = _vm.getPersonalityConfig(_vm.currentPersonality)\n  var l0 = _vm.__map(_vm.sessions, function (session, index) {\n    var $orig = _vm.__get_orig(session)\n    var m2 = _vm.formatSessionTime(session.lastMessageAt)\n    return {\n      $orig: $orig,\n      m2: m2,\n    }\n  })\n  var g0 = _vm.messages.length\n  var l1 = _vm.__map(_vm.messages, function (msg, index) {\n    var $orig = _vm.__get_orig(msg)\n    var m3 = _vm.getMsgId(index)\n    var m4 =\n      !msg.isSystem && msg.role === \"user\"\n        ? _vm.canRevoke(msg) && !msg.isRevoked\n        : null\n    return {\n      $orig: $orig,\n      m3: m3,\n      m4: m4,\n    }\n  })\n  var g1 = _vm.inputText.length\n  var g2 = !_vm.inputText.trim() || _vm.isSending\n  if (!_vm._isMounted) {\n    _vm.e0 = function ($event) {\n      _vm.showPersonalityPopup = false\n    }\n    _vm.e1 = function ($event) {\n      _vm.showSessionPopup = false\n    }\n  }\n  _vm.$mp.data = Object.assign(\n    {},\n    {\n      $root: {\n        m0: m0,\n        m1: m1,\n        l0: l0,\n        g0: g0,\n        l1: l1,\n        g1: g1,\n        g2: g2,\n      },\n    }\n  )\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./chat.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./chat.vue?vue&type=script&lang=js&\"","<template>\n  <view class=\"chat-page\">\n    <!-- 顶部操作栏 -->\n    <view class=\"top-actions\">\n      <view class=\"title-wrapper\">\n        <text class=\"page-title\">AI心理支持</text>\n        <view class=\"session-indicator\" @tap=\"showSessionList\">\n          <text class=\"session-name\">{{ currentSessionName }}</text>\n          <u-icon name=\"arrow-down\" size=\"12\" color=\"#8E8E93\"></u-icon>\n        </view>\n      </view>\n      <view class=\"action-buttons\">\n        <view class=\"action-btn personality-btn\" @tap=\"showPersonalitySelector\">\n          <text class=\"personality-icon\">{{ getPersonalityConfig(currentPersonality).icon }}</text>\n        </view>\n        <view class=\"action-btn\" @tap=\"handleNewSession\">\n          <u-icon name=\"plus\" size=\"18\" color=\"#8E8E93\"></u-icon>\n        </view>\n        <view class=\"action-btn\" @tap=\"handleClearChat\">\n          <u-icon name=\"trash\" size=\"18\" color=\"#8E8E93\"></u-icon>\n        </view>\n      </view>\n    </view>\n    \n    <!-- AI人格选择弹窗 -->\n    <u-popup v-model=\"showPersonalityPopup\" mode=\"bottom\" :safe-area-inset-bottom=\"true\">\n      <view class=\"personality-popup\">\n        <view class=\"popup-header\">\n          <text class=\"popup-title\">选择AI人格</text>\n          <view class=\"popup-close\" @tap=\"showPersonalityPopup = false\">\n            <u-icon name=\"close\" size=\"18\" color=\"#1D1D1F\"></u-icon>\n          </view>\n        </view>\n        \n        <view class=\"personality-list\">\n          <view \n            v-for=\"personality in personalities\" \n            :key=\"personality.id\"\n            class=\"personality-item\"\n            :class=\"{ 'active': personality.id === currentPersonality }\"\n            @tap=\"selectPersonality(personality.id)\"\n          >\n            <view class=\"personality-icon-large\">{{ personality.icon }}</view>\n            <view class=\"personality-info\">\n              <text class=\"personality-name\">{{ personality.name }}</text>\n              <text class=\"personality-desc\">{{ personality.description }}</text>\n            </view>\n            <view v-if=\"personality.id === currentPersonality\" class=\"personality-check\">\n              <u-icon name=\"checkmark\" size=\"20\" color=\"#0A84FF\"></u-icon>\n            </view>\n          </view>\n        </view>\n        \n        <view class=\"personality-examples\">\n          <text class=\"examples-title\">示例回复风格：</text>\n          <view \n            v-for=\"(example, index) in getPersonalityConfig(currentPersonality).examples\" \n            :key=\"index\"\n            class=\"example-item\"\n          >\n            <text class=\"example-text\">{{ example }}</text>\n          </view>\n        </view>\n      </view>\n    </u-popup>\n    \n    <!-- 会话列表弹窗 -->\n    <u-popup v-model=\"showSessionPopup\" mode=\"bottom\" :safe-area-inset-bottom=\"true\">\n      <view class=\"session-popup\">\n        <view class=\"popup-header\">\n          <text class=\"popup-title\">会话列表</text>\n          <view class=\"popup-close\" @tap=\"showSessionPopup = false\">\n            <u-icon name=\"close\" size=\"18\" color=\"#1D1D1F\"></u-icon>\n          </view>\n        </view>\n        \n        <scroll-view class=\"session-list\" scroll-y>\n          <view \n            v-for=\"(session, index) in sessions\" \n            :key=\"session.id\"\n            class=\"session-item\"\n            :class=\"{ 'active': session.id === sessionId }\"\n            @tap=\"switchSession(session)\"\n          >\n            <view class=\"session-info\">\n              <text class=\"session-name\">{{ session.name }}</text>\n              <text class=\"session-time\">{{ formatSessionTime(session.lastMessageAt) }}</text>\n            </view>\n            <view v-if=\"session.id !== 'default'\" class=\"session-actions\">\n              <view class=\"action-icon\" @tap.stop=\"renameSession(session)\">\n                <u-icon name=\"edit-pen\" size=\"16\" color=\"#8E8E93\"></u-icon>\n              </view>\n              <view class=\"action-icon\" @tap.stop=\"deleteSession(session)\">\n                <u-icon name=\"trash\" size=\"16\" color=\"#DC3545\"></u-icon>\n              </view>\n            </view>\n          </view>\n        </scroll-view>\n      </view>\n    </u-popup>\n    \n    <!-- 消息列表 -->\n    <scroll-view \n      class=\"message-list\" \n      scroll-y \n      :scroll-into-view=\"scrollIntoView\"\n      scroll-with-animation\n    >\n      <view v-if=\"messages.length === 0\" class=\"empty-state\">\n        <u-icon name=\"chat\" size=\"64\" color=\"#C7C7CC\"></u-icon>\n        <text class=\"empty-text\">开始与AI进行心理倾诉对话</text>\n        <text class=\"empty-hint\">我会倾听您的心声，给予支持和建议</text>\n      </view>\n      \n      <view v-for=\"(msg, index) in messages\" :key=\"index\" :id=\"getMsgId(index)\" class=\"message-item\">\n        <!-- 系统消息 -->\n        <view v-if=\"msg.isSystem\" class=\"system-message\">\n          <text>{{ msg.content }}</text>\n        </view>\n        \n        <!-- 用户消息 -->\n        <view v-else-if=\"msg.role === 'user'\" class=\"message user-message\">\n          <view class=\"message-content-wrapper\">\n            <view class=\"message-content\" @longpress=\"handleLongPress(msg, index)\">\n              <text>{{ msg.content }}</text>\n              <view v-if=\"msg.isFavorite\" class=\"favorite-badge\">\n                <u-icon name=\"star-fill\" size=\"12\" color=\"#FFB800\"></u-icon>\n              </view>\n              <!-- 发送状态指示器 -->\n              <view v-if=\"msg.sendStatus === 'sending'\" class=\"status-indicator\">\n                <u-icon name=\"loading\" size=\"12\" color=\"#8E8E93\"></u-icon>\n              </view>\n              <!-- 已撤回标记 -->\n              <view v-if=\"msg.isRevoked\" class=\"revoked-indicator\">\n                <text class=\"revoked-text\">已撤回</text>\n              </view>\n            </view>\n            <!-- 撤回按钮（2分钟内可撤回） -->\n            <view v-if=\"canRevoke(msg) && !msg.isRevoked\" class=\"revoke-btn\" @tap=\"revokeMessage(index)\">\n              <u-icon name=\"close\" size=\"12\" color=\"#8E8E93\"></u-icon>\n              <text class=\"revoke-text\">撤回</text>\n            </view>\n            <!-- 发送失败重试按钮 -->\n            <view v-if=\"msg.sendStatus === 'failed'\" class=\"retry-btn\" @tap=\"resendMessage(index)\">\n              <u-icon name=\"reload\" size=\"14\" color=\"#DC3545\"></u-icon>\n              <text class=\"retry-text\">重发</text>\n            </view>\n          </view>\n          <view class=\"message-avatar\">\n            <u-icon name=\"account\" size=\"20\" color=\"#FFFFFF\"></u-icon>\n          </view>\n        </view>\n        \n        <!-- AI消息 -->\n        <view v-else class=\"message ai-message\">\n          <view class=\"message-avatar ai-avatar\">\n            <u-icon name=\"star\" size=\"20\" color=\"#FFFFFF\"></u-icon>\n          </view>\n          <view class=\"ai-message-wrapper\">\n            <view class=\"message-content\" @longpress=\"handleLongPress(msg, index)\">\n              <text>{{ msg.content }}</text>\n              <view v-if=\"msg.isFavorite\" class=\"favorite-badge\">\n                <u-icon name=\"star-fill\" size=\"12\" color=\"#FFB800\"></u-icon>\n              </view>\n            </view>\n            <!-- AI回复质量评分 -->\n            <view class=\"message-rating\">\n              <view v-if=\"!msg.rating\" class=\"rating-prompt\" @tap=\"showRatingDialog(msg, index)\">\n                <u-icon name=\"thumb-up\" size=\"14\" color=\"#8E8E93\"></u-icon>\n                <text class=\"rating-text\">觉得这个回复怎么样？</text>\n              </view>\n              <view v-else class=\"rating-result\">\n                <u-icon \n                  :name=\"msg.rating === 'good' ? 'thumb-up-fill' : 'thumb-down-fill'\" \n                  size=\"14\" \n                  :color=\"msg.rating === 'good' ? '#34C759' : '#FF3B30'\"\n                ></u-icon>\n                <text class=\"rating-text rated\">已评价</text>\n              </view>\n            </view>\n          </view>\n        </view>\n      </view>\n      \n      <!-- 正在输入提示 -->\n      <view v-if=\"isTyping\" class=\"message ai-message\">\n        <view class=\"message-avatar ai-avatar\">\n          <u-icon name=\"star\" size=\"20\" color=\"#FFFFFF\"></u-icon>\n        </view>\n        <view class=\"message-content typing-indicator\">\n          <view class=\"dot\"></view>\n          <view class=\"dot\"></view>\n          <view class=\"dot\"></view>\n        </view>\n      </view>\n    </scroll-view>\n    \n    <!-- 输入框 -->\n    <view class=\"input-bar\">\n      <view class=\"input-wrapper\">\n        <view class=\"input-toolbar\">\n          <view class=\"toolbar-btn\" @tap=\"toggleEmojiPicker\">\n            <u-icon name=\"smile\" size=\"22\" color=\"#8E8E93\"></u-icon>\n          </view>\n        </view>\n        <textarea\n          v-model=\"inputText\"\n          class=\"input-field\"\n          placeholder=\"输入您想说的话...\"\n          :auto-height=\"true\"\n          :maxlength=\"500\"\n          :show-confirm-bar=\"false\"\n          @confirm=\"sendMessage\"\n        />\n        <view class=\"input-actions\">\n          <text class=\"char-count\">{{ inputText.length }}/500</text>\n          <button \n            class=\"send-btn\" \n            :disabled=\"!inputText.trim() || isSending\"\n            @tap=\"sendMessage\"\n          >\n            <u-icon name=\"arrow-up\" size=\"20\" color=\"#FFFFFF\"></u-icon>\n          </button>\n        </view>\n      </view>\n      \n      <!-- 表情选择器 -->\n      <view v-if=\"showEmojiPicker\" class=\"emoji-picker\">\n        <view class=\"emoji-grid\">\n          <view \n            v-for=\"(emoji, index) in emojiList\" \n            :key=\"index\" \n            class=\"emoji-item\"\n            @tap=\"insertEmoji(emoji)\"\n          >\n            {{ emoji }}\n          </view>\n        </view>\n      </view>\n    </view>\n    \n    \n  </view>\n</template>\n\n<script>\nimport tabBarManager from '@/utils/tabbar-manager.js';\nimport chatStorage from '@/utils/chat-storage.js';\nimport { checkSensitiveWords, getCrisisWarning, getSensitiveWarning } from '@/utils/sensitive-words.js';\nimport { \n  PersonalityType, \n  getAllPersonalities, \n  getPersonalityConfig,\n  savePersonalityPreference,\n  getPersonalityPreference \n} from '@/utils/ai-personality.js';\n\nexport default {\n  data() {\n    return {\n      messages: [],\n      inputText: '',\n      isSending: false,\n      isTyping: false,\n      scrollIntoView: '',\n      msgIdPrefix: 'msg-',\n      sessionId: 'default', // 当前会话ID\n      currentSessionName: '默认会话', // 当前会话名称\n      sessions: [], // 会话列表\n      showSessionPopup: false, // 显示会话列表弹窗\n      isLoadingHistory: false,\n      favoriteMessages: [],  // 收藏的消息\n      showEmojiPicker: false,  // 是否显示表情选择器\n      // AI人格相关\n      currentPersonality: PersonalityType.GENTLE, // 当前AI人格\n      showPersonalityPopup: false, // 显示人格选择弹窗\n      personalities: getAllPersonalities(), // 所有人格配置\n      emojiList: [\n        '😊', '😃', '😄', '😁', '😆', '😅', '🤣', '😂',\n        '🙂', '🙃', '😉', '😊', '😇', '🥰', '😍', '🤩',\n        '😘', '😗', '☺️', '😚', '😙', '🥲', '😋', '😛',\n        '😜', '🤪', '😝', '🤑', '🤗', '🤭', '🤫', '🤔',\n        '🤐', '🤨', '😐', '😑', '😶', '😏', '😒', '🙄',\n        '😬', '🤥', '😌', '😔', '😪', '🤤', '😴', '😷',\n        '🤒', '🤕', '🤢', '🤮', '🤧', '🥵', '🥶', '😶‍🌫️',\n        '😵', '🤯', '🤠', '🥳', '🥴', '😎', '🤓', '🧐',\n        '👍', '👎', '👏', '🙏', '💪', '❤️', '💔', '💯'\n      ]\n    }\n  },\n  \n  async onLoad() {\n    console.log('[CHAT] AI对话页面加载');\n    \n    // 初始化存储\n    await chatStorage.init();\n    \n    // 加载用户的AI人格偏好\n    this.currentPersonality = getPersonalityPreference();\n    console.log('[CHAT] 当前AI人格:', this.currentPersonality);\n    \n    // 加载会话列表\n    await this.loadSessions();\n    \n    // 加载历史消息\n    await this.loadHistoryMessages();\n    \n    // 加载收藏列表\n    this.loadFavorites();\n    \n    // 如果没有历史消息，添加欢迎消息\n    if (this.messages.length === 0) {\n      const personalityConfig = getPersonalityConfig(this.currentPersonality);\n      this.addAIMessage(`您好！我是您的心理支持AI（${personalityConfig.name}）。无论您遇到什么困扰，都可以和我倾诉。我会认真倾听，并尽我所能给予支持和建议。`);\n    }\n    \n    // 清理过期数据（后台执行）\n    chatStorage.cleanExpiredData().catch(err => {\n      console.warn('[CHAT] 清理过期数据失败:', err);\n    });\n  },\n  \n  onShow() {\n    // 通知导航栏更新状态\n    tabBarManager.setCurrentIndexByPath('/pages/intervene/chat');\n  },\n  \n  onUnload() {\n    // 页面卸载时保存消息\n    this.saveAllMessages();\n  },\n  \n  methods: {\n    /**\n     * 加载会话列表\n     */\n    async loadSessions() {\n      try {\n        const sessionsData = uni.getStorageSync('chat_sessions');\n        if (sessionsData) {\n          this.sessions = JSON.parse(sessionsData);\n        } else {\n          // 创建默认会话\n          this.sessions = [{\n            id: 'default',\n            name: '默认会话',\n            createdAt: Date.now(),\n            lastMessageAt: Date.now(),\n            messageCount: 0\n          }];\n          this.saveSessions();\n        }\n        \n        // 更新当前会话名称\n        const currentSession = this.sessions.find(s => s.id === this.sessionId);\n        if (currentSession) {\n          this.currentSessionName = currentSession.name;\n        }\n        \n        console.log(`[CHAT] 加载了 ${this.sessions.length} 个会话`);\n      } catch (error) {\n        console.error('[CHAT] 加载会话列表失败:', error);\n      }\n    },\n    \n    /**\n     * 保存会话列表\n     */\n    saveSessions() {\n      try {\n        uni.setStorageSync('chat_sessions', JSON.stringify(this.sessions));\n        console.log('[CHAT] 会话列表已保存');\n      } catch (error) {\n        console.error('[CHAT] 保存会话列表失败:', error);\n      }\n    },\n    \n    /**\n     * 显示会话列表\n     */\n    showSessionList() {\n      this.showSessionPopup = true;\n    },\n    \n    /**\n     * 切换会话\n     */\n    async switchSession(session) {\n      if (session.id === this.sessionId) {\n        this.showSessionPopup = false;\n        return;\n      }\n      \n      // 保存当前会话的消息\n      await this.saveAllMessages();\n      \n      // 切换会话\n      this.sessionId = session.id;\n      this.currentSessionName = session.name;\n      this.messages = [];\n      \n      // 加载新会话的消息\n      await this.loadHistoryMessages();\n      \n      // 如果是空会话，添加欢迎消息\n      if (this.messages.length === 0) {\n        this.addAIMessage('您好！我是您的心理支持AI。无论您遇到什么困扰，都可以和我倾诉。我会认真倾听，并尽我所能给予支持和建议。');\n      }\n      \n      this.showSessionPopup = false;\n      \n      uni.showToast({\n        title: `已切换到：${session.name}`,\n        icon: 'success',\n        duration: 1500\n      });\n      \n      console.log('[CHAT] 切换到会话:', session.id);\n    },\n    \n    /**\n     * 创建新会话\n     */\n    handleNewSession() {\n      uni.showModal({\n        title: '新建会话',\n        content: '请输入会话名称',\n        placeholderText: '例如：工作压力、学习困扰等...',\n        editable: true,\n        confirmText: '创建',\n        success: (res) => {\n          if (res.confirm) {\n            const sessionName = res.content?.trim() || `会话${this.sessions.length + 1}`;\n            this.createNewSession(sessionName);\n          }\n        }\n      });\n    },\n    \n    /**\n     * 创建新会话\n     */\n    async createNewSession(name) {\n      const newSession = {\n        id: `session_${Date.now()}`,\n        name: name,\n        createdAt: Date.now(),\n        lastMessageAt: Date.now(),\n        messageCount: 0\n      };\n      \n      this.sessions.unshift(newSession);\n      this.saveSessions();\n      \n      // 切换到新会话\n      await this.switchSession(newSession);\n      \n      console.log('[CHAT] 创建新会话:', newSession);\n    },\n    \n    /**\n     * 重命名会话\n     */\n    renameSession(session) {\n      uni.showModal({\n        title: '重命名会话',\n        content: '请输入新的会话名称',\n        placeholderText: session.name,\n        editable: true,\n        confirmText: '确定',\n        success: (res) => {\n          if (res.confirm && res.content) {\n            const newName = res.content.trim();\n            if (newName) {\n              session.name = newName;\n              if (session.id === this.sessionId) {\n                this.currentSessionName = newName;\n              }\n              this.saveSessions();\n              \n              uni.showToast({\n                title: '重命名成功',\n                icon: 'success'\n              });\n              \n              console.log('[CHAT] 会话已重命名:', session.id, newName);\n            }\n          }\n        }\n      });\n    },\n    \n    /**\n     * 删除会话\n     */\n    deleteSession(session) {\n      uni.showModal({\n        title: '删除会话',\n        content: `确定要删除会话\"${session.name}\"吗？此操作不可恢复。`,\n        confirmText: '确定删除',\n        confirmColor: '#DC3545',\n        success: async (res) => {\n          if (res.confirm) {\n            // 从列表中移除\n            const index = this.sessions.findIndex(s => s.id === session.id);\n            if (index > -1) {\n              this.sessions.splice(index, 1);\n              this.saveSessions();\n            }\n            \n            // 删除会话的所有消息\n            await chatStorage.clearSession(session.id);\n            \n            // 如果删除的是当前会话，切换到默认会话\n            if (session.id === this.sessionId) {\n              const defaultSession = this.sessions.find(s => s.id === 'default') || this.sessions[0];\n              if (defaultSession) {\n                await this.switchSession(defaultSession);\n              }\n            }\n            \n            uni.showToast({\n              title: '会话已删除',\n              icon: 'success'\n            });\n            \n            console.log('[CHAT] 会话已删除:', session.id);\n          }\n        }\n      });\n    },\n    \n    /**\n     * 格式化会话时间\n     */\n    formatSessionTime(timestamp) {\n      const now = Date.now();\n      const diff = now - timestamp;\n      \n      const minute = 60 * 1000;\n      const hour = 60 * minute;\n      const day = 24 * hour;\n      \n      if (diff < minute) {\n        return '刚刚';\n      } else if (diff < hour) {\n        return `${Math.floor(diff / minute)}分钟前`;\n      } else if (diff < day) {\n        return `${Math.floor(diff / hour)}小时前`;\n      } else if (diff < 7 * day) {\n        return `${Math.floor(diff / day)}天前`;\n      } else {\n        const date = new Date(timestamp);\n        return `${date.getMonth() + 1}/${date.getDate()}`;\n      }\n    },\n    \n    /**\n     * 加载历史消息\n     */\n    async loadHistoryMessages() {\n      try {\n        this.isLoadingHistory = true;\n        const messages = await chatStorage.getMessages(this.sessionId);\n        \n        if (messages && messages.length > 0) {\n          // 转换为页面使用的格式\n          this.messages = messages.map(msg => ({\n            role: msg.role,\n            content: msg.content,\n            timestamp: msg.timestamp\n          }));\n          \n          console.log(`[CHAT] 已加载 ${messages.length} 条历史消息`);\n          this.scrollToBottom();\n        }\n      } catch (error) {\n        console.error('[CHAT] 加载历史消息失败:', error);\n      } finally {\n        this.isLoadingHistory = false;\n      }\n    },\n    \n    /**\n     * 保存单条消息\n     */\n    async saveMessage(message) {\n      try {\n        await chatStorage.saveMessage(this.sessionId, {\n          role: message.role,\n          content: message.content,\n          timestamp: message.timestamp || Date.now()\n        });\n        \n        // 更新会话信息\n        this.updateSessionInfo();\n      } catch (error) {\n        console.error('[CHAT] 保存消息失败:', error);\n      }\n    },\n    \n    /**\n     * 更新会话信息\n     */\n    updateSessionInfo() {\n      const session = this.sessions.find(s => s.id === this.sessionId);\n      if (session) {\n        session.lastMessageAt = Date.now();\n        session.messageCount = this.messages.length;\n        this.saveSessions();\n      }\n    },\n    \n    /**\n     * 保存所有消息\n     */\n    async saveAllMessages() {\n      try {\n        await chatStorage.saveMessages(this.sessionId, this.messages);\n        console.log('[CHAT] 所有消息已保存');\n      } catch (error) {\n        console.error('[CHAT] 保存所有消息失败:', error);\n      }\n    },\n    \n    /**\n     * 清空当前会话\n     */\n    async clearCurrentSession() {\n      try {\n        await chatStorage.clearSession(this.sessionId);\n        this.messages = [];\n        \n        // 重新添加欢迎消息\n        this.addAIMessage('您好！我是您的心理支持AI。无论您遇到什么困扰，都可以和我倾诉。我会认真倾听，并尽我所能给予支持和建议。');\n        \n        uni.showToast({\n          title: '聊天记录已清空',\n          icon: 'success'\n        });\n        \n        console.log('[CHAT] 会话已清空');\n      } catch (error) {\n        console.error('[CHAT] 清空会话失败:', error);\n        uni.showToast({\n          title: '清空失败',\n          icon: 'none'\n        });\n      }\n    },\n    \n    /**\n     * 处理消息长按\n     */\n    handleLongPress(msg, index) {\n      const isFavorite = msg.isFavorite || false;\n      const actions = ['复制消息', isFavorite ? '取消收藏' : '收藏消息', '删除消息'];\n      \n      uni.showActionSheet({\n        itemList: actions,\n        success: (res) => {\n          const actionIndex = res.tapIndex;\n          \n          switch (actionIndex) {\n            case 0:\n              // 复制消息\n              this.copyMessage(msg);\n              break;\n            case 1:\n              // 收藏/取消收藏消息\n              this.toggleFavoriteMessage(msg, index);\n              break;\n            case 2:\n              // 删除消息\n              this.deleteMessage(index);\n              break;\n          }\n        }\n      });\n      \n      // 震动反馈\n      uni.vibrateShort({\n        success: () => {\n          console.log('[CHAT] 长按震动反馈');\n        }\n      });\n    },\n    \n    /**\n     * 复制消息内容\n     */\n    copyMessage(msg) {\n      uni.setClipboardData({\n        data: msg.content,\n        success: () => {\n          uni.showToast({\n            title: '已复制',\n            icon: 'success',\n            duration: 1500\n          });\n          console.log('[CHAT] 消息已复制');\n        },\n        fail: (err) => {\n          console.error('[CHAT] 复制失败:', err);\n          uni.showToast({\n            title: '复制失败',\n            icon: 'none'\n          });\n        }\n      });\n    },\n    \n    /**\n     * 切换消息收藏状态\n     */\n    toggleFavoriteMessage(msg, index) {\n      const isFavorite = msg.isFavorite || false;\n      \n      // 更新消息状态\n      this.$set(this.messages[index], 'isFavorite', !isFavorite);\n      \n      // 更新收藏列表\n      if (!isFavorite) {\n        // 添加到收藏\n        this.favoriteMessages.push({\n          content: msg.content,\n          role: msg.role,\n          timestamp: msg.timestamp || Date.now(),\n          sessionId: this.sessionId\n        });\n        \n        uni.showToast({\n          title: '已收藏',\n          icon: 'success',\n          duration: 1500\n        });\n        console.log('[CHAT] 消息已收藏');\n      } else {\n        // 从收藏中移除\n        const favIndex = this.favoriteMessages.findIndex(\n          fav => fav.content === msg.content && fav.timestamp === msg.timestamp\n        );\n        if (favIndex > -1) {\n          this.favoriteMessages.splice(favIndex, 1);\n        }\n        \n        uni.showToast({\n          title: '已取消收藏',\n          icon: 'none',\n          duration: 1500\n        });\n        console.log('[CHAT] 已取消收藏');\n      }\n      \n      // 保存收藏列表到本地\n      this.saveFavorites();\n      \n      // 保存消息更新\n      this.saveAllMessages();\n    },\n    \n    /**\n     * 删除消息\n     */\n    deleteMessage(index) {\n      uni.showModal({\n        title: '确认删除',\n        content: '确定要删除这条消息吗？',\n        success: (res) => {\n          if (res.confirm) {\n            this.messages.splice(index, 1);\n            this.saveAllMessages();\n            \n            uni.showToast({\n              title: '已删除',\n              icon: 'success',\n              duration: 1500\n            });\n            console.log('[CHAT] 消息已删除');\n          }\n        }\n      });\n    },\n    \n    /**\n     * 保存收藏列表\n     */\n    saveFavorites() {\n      try {\n        uni.setStorageSync('chat_favorites', JSON.stringify(this.favoriteMessages));\n        console.log('[CHAT] 收藏列表已保存');\n      } catch (error) {\n        console.error('[CHAT] 保存收藏列表失败:', error);\n      }\n    },\n    \n    /**\n     * 加载收藏列表\n     */\n    loadFavorites() {\n      try {\n        const favorites = uni.getStorageSync('chat_favorites');\n        if (favorites) {\n          this.favoriteMessages = JSON.parse(favorites);\n          console.log(`[CHAT] 加载了${this.favoriteMessages.length}条收藏消息`);\n        }\n      } catch (error) {\n        console.error('[CHAT] 加载收藏列表失败:', error);\n      }\n    },\n    \n    /**\n     * 切换表情选择器显示\n     */\n    toggleEmojiPicker() {\n      this.showEmojiPicker = !this.showEmojiPicker;\n      console.log(`[CHAT] 表情选择器: ${this.showEmojiPicker ? '显示' : '隐藏'}`);\n    },\n    \n    /**\n     * 插入表情\n     */\n    insertEmoji(emoji) {\n      this.inputText += emoji;\n      // 关闭表情选择器（可选）\n      // this.showEmojiPicker = false;\n      console.log('[CHAT] 插入表情:', emoji);\n    },\n    \n    // 发送消息\n    async sendMessage() {\n      const text = this.inputText.trim();\n      if (!text || this.isSending) return;\n      \n      // 敏感词检测\n      const sensitiveCheck = checkSensitiveWords(text);\n      \n      // 如果包含危机关键词，显示危机干预提示\n      if (sensitiveCheck.isCrisis) {\n        uni.showModal({\n          title: '⚠️ 重要提示',\n          content: getCrisisWarning(),\n          confirmText: '我知道了',\n          confirmColor: '#DC3545',\n          showCancel: false,\n          success: (res) => {\n            // 用户确认后仍然发送消息，但会由后端进行特殊处理\n            this.proceedSendMessage(text, sensitiveCheck);\n          }\n        });\n        return;\n      }\n      \n      // 如果包含敏感词但不是危机，显示警告\n      if (sensitiveCheck.hasSensitive) {\n        uni.showModal({\n          title: '敏感内容提示',\n          content: getSensitiveWarning(sensitiveCheck.matchedWords),\n          confirmText: '继续发送',\n          cancelText: '重新编辑',\n          success: (res) => {\n            if (res.confirm) {\n              this.proceedSendMessage(text, sensitiveCheck);\n            }\n          }\n        });\n        return;\n      }\n      \n      // 正常发送\n      this.proceedSendMessage(text, null);\n    },\n    \n    /**\n     * 执行发送消息（内部方法）\n     */\n    async proceedSendMessage(text, sensitiveCheck) {\n      // 创建用户消息\n      const userMessage = {\n        role: 'user',\n        content: text,\n        timestamp: Date.now(),\n        sendStatus: 'sending',  // 添加发送状态\n        hasSensitive: sensitiveCheck?.hasSensitive || false,\n        isCrisis: sensitiveCheck?.isCrisis || false\n      };\n      \n      // 添加到消息列表\n      this.messages.push(userMessage);\n      const messageIndex = this.messages.length - 1;\n      this.inputText = '';\n      this.scrollToBottom();\n      \n      // 保存用户消息\n      await this.saveMessage(userMessage);\n      \n      // 发送到AI并获取回复\n      await this.sendToAI(messageIndex);\n    },\n    \n    /**\n     * 显示人格选择器\n     */\n    showPersonalitySelector() {\n      this.showPersonalityPopup = true;\n    },\n    \n    /**\n     * 选择AI人格\n     */\n    selectPersonality(personalityId) {\n      if (personalityId === this.currentPersonality) {\n        this.showPersonalityPopup = false;\n        return;\n      }\n      \n      const oldPersonality = getPersonalityConfig(this.currentPersonality);\n      const newPersonality = getPersonalityConfig(personalityId);\n      \n      // 更新人格\n      this.currentPersonality = personalityId;\n      \n      // 保存偏好\n      savePersonalityPreference(personalityId);\n      \n      // 关闭弹窗\n      this.showPersonalityPopup = false;\n      \n      // 提示用户\n      uni.showToast({\n        title: `已切换至${newPersonality.name}`,\n        icon: 'success',\n        duration: 1500\n      });\n      \n      // 添加系统提示\n      const systemMessage = {\n        role: 'system',\n        content: `（您已切换AI人格：${oldPersonality.name} → ${newPersonality.name}）`,\n        timestamp: Date.now(),\n        isSystem: true\n      };\n      this.messages.push(systemMessage);\n      this.scrollToBottom();\n      \n      console.log('[CHAT] 切换AI人格:', oldPersonality.name, '→', newPersonality.name);\n    },\n    \n    /**\n     * 发送消息到AI并处理回复\n     */\n    async sendToAI(messageIndex) {\n      // 显示输入中状态\n      this.isSending = true;\n      this.isTyping = true;\n      \n      try {\n        // 准备发送的消息列表（只包含已成功的消息）\n        const messagesToSend = this.messages\n          .filter(msg => msg.sendStatus !== 'failed' && msg.sendStatus !== 'sending' && !msg.isSystem)\n          .concat([this.messages[messageIndex]]);\n        \n        // 调用云函数获取AI回复\n        const res = await uniCloud.callFunction({\n          name: 'stress-chat',\n          data: {\n            messages: messagesToSend.map(m => ({\n              role: m.role,\n              content: m.content\n            })),\n            personality: this.currentPersonality, // 传入当前人格\n            stream: false\n          }\n        });\n        \n        // 添加AI回复消息\n        if (res.result && res.result.success && res.result.data) {\n          const aiContent = res.result.data.content || res.result.data.message;\n          \n          // 标记用户消息发送成功\n          this.$set(this.messages[messageIndex], 'sendStatus', 'success');\n          await this.saveMessage(this.messages[messageIndex]);\n          \n          // 添加AI回复\n          this.addAIMessage(aiContent);\n        } else {\n          console.error('[CHAT] AI回复异常:', res);\n          // 标记消息发送失败\n          this.$set(this.messages[messageIndex], 'sendStatus', 'failed');\n          await this.saveMessage(this.messages[messageIndex]);\n          \n          uni.showToast({\n            title: 'AI回复异常，点击重发',\n            icon: 'none',\n            duration: 2000\n          });\n        }\n        \n      } catch (error) {\n        console.error('[CHAT] 发送失败:', error);\n        \n        // 标记消息发送失败\n        this.$set(this.messages[messageIndex], 'sendStatus', 'failed');\n        await this.saveMessage(this.messages[messageIndex]);\n        \n        uni.showToast({\n          title: '发送失败，点击重发',\n          icon: 'none',\n          duration: 2000\n        });\n      } finally {\n        this.isSending = false;\n        this.isTyping = false;\n        this.scrollToBottom();\n      }\n    },\n    \n    /**\n     * 重发失败的消息\n     */\n    async resendMessage(messageIndex) {\n      const message = this.messages[messageIndex];\n      \n      if (!message || message.role !== 'user') {\n        return;\n      }\n      \n      // 更新状态为发送中\n      this.$set(this.messages[messageIndex], 'sendStatus', 'sending');\n      \n      // 震动反馈\n      uni.vibrateShort({\n        success: () => {\n          console.log('[CHAT] 重发震动反馈');\n        }\n      });\n      \n      // 重新发送\n      await this.sendToAI(messageIndex);\n    },\n    \n    // 模拟AI回复（开发阶段使用）\n    async simulateAIResponse(userMsg) {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          let response = '';\n          \n          if (userMsg.includes('压力') || userMsg.includes('焦虑')) {\n            response = '我理解您现在感到压力很大。压力是生活中很正常的一部分，重要的是学会如何管理它。您可以尝试深呼吸、适度运动，或者找朋友倾诉。记住，您不是一个人在面对这些。';\n          } else if (userMsg.includes('睡不着') || userMsg.includes('失眠')) {\n            response = '睡眠问题确实很困扰人。建议您睡前避免使用手机，保持规律的作息时间。您也可以尝试我们的冥想音疗功能，帮助放松身心，改善睡眠质量。';\n          } else if (userMsg.includes('谢谢') || userMsg.includes('感谢')) {\n            response = '不客气！很高兴能够帮到您。如果还有任何困扰，随时可以和我聊聊。记得照顾好自己！';\n          } else {\n            response = '我听到了您的心声。虽然我只是一个AI，但我真诚地希望能给您一些支持。如果您愿意，可以详细说说您的感受，我会认真倾听。';\n          }\n          \n          this.addAIMessage(response);\n          resolve();\n        }, 1500);\n      });\n    },\n    \n    // 添加AI消息\n    async addAIMessage(content) {\n      const aiMessage = {\n        role: 'assistant',\n        content: content,\n        timestamp: Date.now()\n      };\n      \n      this.messages.push(aiMessage);\n      this.scrollToBottom();\n      \n      // 保存AI消息\n      await this.saveMessage(aiMessage);\n    },\n    \n    // 滚动到底部\n    scrollToBottom() {\n      this.$nextTick(() => {\n        this.scrollIntoView = this.getMsgId(this.messages.length - 1);\n      });\n    },\n    \n    // 获取消息ID\n    getMsgId(index) {\n      return this.msgIdPrefix + index;\n    },\n    \n    /**\n     * 判断消息是否可以撤回（2分钟内）\n     */\n    canRevoke(msg) {\n      if (!msg || msg.role !== 'user' || msg.sendStatus !== 'success') {\n        return false;\n      }\n      \n      const now = Date.now();\n      const messageTime = msg.timestamp || 0;\n      const timeDiff = now - messageTime;\n      \n      // 2分钟 = 120000毫秒\n      return timeDiff < 120000;\n    },\n    \n    /**\n     * 撤回消息\n     */\n    async revokeMessage(index) {\n      const message = this.messages[index];\n      \n      if (!message || !this.canRevoke(message)) {\n        uni.showToast({\n          title: '无法撤回此消息',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      uni.showModal({\n        title: '撤回消息',\n        content: '确定要撤回这条消息吗？',\n        confirmText: '撤回',\n        cancelText: '取消',\n        success: async (res) => {\n          if (res.confirm) {\n            // 标记消息为已撤回\n            this.$set(this.messages[index], 'isRevoked', true);\n            this.$set(this.messages[index], 'revokedAt', Date.now());\n            \n            // 保存更新后的消息\n            await this.saveMessage(this.messages[index]);\n            \n            // 震动反馈\n            uni.vibrateShort({\n              success: () => {\n                console.log('[CHAT] 撤回震动反馈');\n              }\n            });\n            \n            // 同时检查是否有对应的AI回复需要标记\n            // 查找下一条AI消息\n            if (index + 1 < this.messages.length && \n                this.messages[index + 1].role === 'assistant') {\n              this.$set(this.messages[index + 1], 'relatedRevoked', true);\n              await this.saveMessage(this.messages[index + 1]);\n            }\n            \n            uni.showToast({\n              title: '已撤回',\n              icon: 'success',\n              duration: 1500\n            });\n            \n            console.log('[CHAT] 消息已撤回, index:', index);\n          }\n        }\n      });\n    },\n    \n    /**\n     * 处理清空聊天\n     */\n    handleClearChat() {\n      if (this.messages.length === 0) {\n        uni.showToast({\n          title: '暂无聊天记录',\n          icon: 'none'\n        });\n        return;\n      }\n      \n      uni.showModal({\n        title: '清空聊天记录',\n        content: '确定要清空所有聊天记录吗？此操作不可恢复。',\n        confirmText: '确定清空',\n        confirmColor: '#DC3545',\n        success: (res) => {\n          if (res.confirm) {\n            this.clearCurrentSession();\n          }\n        }\n      });\n    },\n    \n    /**\n     * 显示评分对话框\n     */\n    showRatingDialog(msg, index) {\n      uni.showActionSheet({\n        itemList: ['👍 很有帮助', '👎 不够满意', '💡 提供反馈'],\n        success: (res) => {\n          const tapIndex = res.tapIndex;\n          \n          if (tapIndex === 0) {\n            // 好评\n            this.rateMessage(msg, index, 'good');\n          } else if (tapIndex === 1) {\n            // 差评\n            this.rateMessage(msg, index, 'bad');\n            // 询问是否提供详细反馈\n            this.askForDetailedFeedback(msg, index);\n          } else if (tapIndex === 2) {\n            // 直接提供反馈\n            this.askForDetailedFeedback(msg, index);\n          }\n        }\n      });\n    },\n    \n    /**\n     * 评价消息\n     */\n    async rateMessage(msg, index, rating) {\n      // 更新本地消息状态\n      this.$set(this.messages[index], 'rating', rating);\n      this.$set(this.messages[index], 'ratedAt', Date.now());\n      \n      // 保存到本地存储\n      await this.saveMessage(this.messages[index]);\n      \n      // 提交评分到服务器（异步，不影响用户体验）\n      this.submitRating(msg, rating).catch(err => {\n        console.warn('[CHAT] 评分上传失败:', err);\n      });\n      \n      // 震动反馈\n      uni.vibrateShort({\n        success: () => {\n          console.log('[CHAT] 评分震动反馈');\n        }\n      });\n      \n      // 显示感谢提示\n      uni.showToast({\n        title: rating === 'good' ? '感谢您的反馈！' : '我们会努力改进',\n        icon: 'success',\n        duration: 1500\n      });\n      \n      console.log('[CHAT] 消息评分:', rating);\n    },\n    \n    /**\n     * 提交评分到服务器\n     */\n    async submitRating(msg, rating, feedback = '') {\n      try {\n        const res = await uniCloud.callFunction({\n          name: 'chat-feedback',\n          data: {\n            sessionId: this.sessionId,\n            messageContent: msg.content,\n            messageTimestamp: msg.timestamp,\n            rating: rating,\n            feedback: feedback,\n            timestamp: Date.now()\n          }\n        });\n        \n        if (res.result && res.result.success) {\n          console.log('[CHAT] 评分已提交');\n        }\n      } catch (error) {\n        console.error('[CHAT] 评分提交失败:', error);\n        // 失败不影响用户体验，仅记录日志\n      }\n    },\n    \n    /**\n     * 询问详细反馈\n     */\n    askForDetailedFeedback(msg, index) {\n      // 延迟显示，避免与评分操作冲突\n      setTimeout(() => {\n        uni.showModal({\n          title: '提供反馈',\n          content: '请告诉我们您的想法，帮助我们改进AI回复质量',\n          placeholderText: '例如：回复太简短、不够专业等...',\n          editable: true,\n          confirmText: '提交反馈',\n          success: (res) => {\n            if (res.confirm && res.content) {\n              // 提交详细反馈\n              this.submitRating(msg, msg.rating || 'neutral', res.content);\n              \n              uni.showToast({\n                title: '感谢您的反馈！',\n                icon: 'success'\n              });\n            }\n          }\n        });\n      }, 300);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.chat-page {\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  background: #F5F5F7;\n  /* 顶部安全区域 */\n  padding-top: constant(safe-area-inset-top);\n  padding-top: env(safe-area-inset-top);\n  /* TabBar底部安全区域 */\n  padding-bottom: calc(50px + constant(safe-area-inset-bottom));\n  padding-bottom: calc(50px + env(safe-area-inset-bottom));\n}\n\n/* 顶部操作栏 */\n.top-actions {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24rpx 32rpx;\n  background: #FFFFFF;\n  border-bottom: 1rpx solid #E5E5EA;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n}\n\n/* 标题包装器 */\n.title-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 4rpx;\n}\n\n.page-title {\n  font-size: 36rpx;\n  font-weight: 600;\n  color: #1D1D1F;\n}\n\n/* 会话指示器 */\n.session-indicator {\n  display: flex;\n  align-items: center;\n  gap: 8rpx;\n  padding: 4rpx 12rpx;\n  background: #F5F5F7;\n  border-radius: 12rpx;\n  transition: all 0.2s ease;\n}\n\n.session-indicator:active {\n  transform: scale(0.95);\n  background: #E5E5EA;\n}\n\n.session-name {\n  font-size: 24rpx;\n  color: #8E8E93;\n  max-width: 300rpx;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.action-buttons {\n  display: flex;\n  align-items: center;\n  gap: 16rpx;\n}\n\n.action-btn {\n  width: 64rpx;\n  height: 64rpx;\n  border-radius: 50%;\n  background: #F5F5F7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.2s ease;\n}\n\n.action-btn:active {\n  transform: scale(0.95);\n  background: #E5E5EA;\n}\n\n/* 消息列表 */\n.message-list {\n  flex: 1;\n  padding: 24rpx;\n  /* 底部padding为输入框高度 + 额外间距 */\n  padding-bottom: 240rpx;\n  overflow-y: auto;\n}\n\n.empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 120rpx 48rpx;\n  text-align: center;\n}\n\n.empty-text {\n  font-size: 32rpx;\n  font-weight: 600;\n  color: #1D1D1F;\n  margin-top: 24rpx;\n}\n\n.empty-hint {\n  font-size: 28rpx;\n  color: #86868B;\n  margin-top: 16rpx;\n  line-height: 1.5;\n}\n\n/* 消息项 */\n.message-item {\n  margin-bottom: 24rpx;\n}\n\n.message {\n  display: flex;\n  align-items: flex-end;\n  gap: 16rpx;\n}\n\n.user-message {\n  flex-direction: row-reverse;\n}\n\n.message-avatar {\n  width: 64rpx;\n  height: 64rpx;\n  border-radius: 50%;\n  background: #0A84FF;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n}\n\n.ai-avatar {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n/* 消息内容包装器 */\n.message-content-wrapper {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 8rpx;\n}\n\n.message-content {\n  max-width: 500rpx;\n  padding: 24rpx 28rpx;\n  border-radius: 24rpx;\n  font-size: 30rpx;\n  line-height: 1.6;\n  word-break: break-word;\n  position: relative;\n}\n\n/* 发送状态指示器 */\n.status-indicator {\n  position: absolute;\n  bottom: 4rpx;\n  right: 8rpx;\n  display: flex;\n  align-items: center;\n  gap: 4rpx;\n}\n\n/* 重发按钮 */\n.retry-btn {\n  display: flex;\n  align-items: center;\n  gap: 8rpx;\n  padding: 8rpx 16rpx;\n  background: #FFF;\n  border: 1rpx solid #DC3545;\n  border-radius: 20rpx;\n  transition: all 0.2s ease;\n}\n\n.retry-btn:active {\n  transform: scale(0.95);\n  background: #FFF5F5;\n}\n\n.retry-text {\n  font-size: 24rpx;\n  color: #DC3545;\n  font-weight: 500;\n}\n\n/* 撤回按钮 */\n.revoke-btn {\n  display: flex;\n  align-items: center;\n  gap: 6rpx;\n  padding: 6rpx 12rpx;\n  background: rgba(255, 255, 255, 0.9);\n  border: 1rpx solid #E5E5EA;\n  border-radius: 16rpx;\n  transition: all 0.2s ease;\n}\n\n.revoke-btn:active {\n  transform: scale(0.95);\n  background: #F5F5F7;\n}\n\n.revoke-text {\n  font-size: 22rpx;\n  color: #8E8E93;\n}\n\n/* 已撤回标记 */\n.revoked-indicator {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 10;\n}\n\n.revoked-text {\n  font-size: 24rpx;\n  color: #8E8E93;\n  font-style: italic;\n}\n\n/* 已撤回的消息样式 */\n.message.user-message:has(.revoked-indicator) .message-content {\n  opacity: 0.5;\n  position: relative;\n}\n\n.message.user-message:has(.revoked-indicator) .message-content text {\n  text-decoration: line-through;\n  color: #8E8E93;\n}\n\n/* AI消息包装器 */\n.ai-message-wrapper {\n  display: flex;\n  flex-direction: column;\n  gap: 12rpx;\n  max-width: 500rpx;\n}\n\n/* 消息评分 */\n.message-rating {\n  display: flex;\n  align-items: center;\n  padding: 0 8rpx;\n}\n\n.rating-prompt {\n  display: flex;\n  align-items: center;\n  gap: 8rpx;\n  padding: 8rpx 16rpx;\n  background: #F5F5F7;\n  border-radius: 16rpx;\n  transition: all 0.2s ease;\n}\n\n.rating-prompt:active {\n  transform: scale(0.95);\n  background: #E5E5EA;\n}\n\n.rating-result {\n  display: flex;\n  align-items: center;\n  gap: 8rpx;\n  padding: 8rpx 16rpx;\n}\n\n.rating-text {\n  font-size: 22rpx;\n  color: #8E8E93;\n}\n\n.rating-text.rated {\n  color: #34C759;\n  font-weight: 500;\n}\n\n.favorite-badge {\n  position: absolute;\n  top: -8rpx;\n  right: -8rpx;\n  width: 36rpx;\n  height: 36rpx;\n  background: #FFFFFF;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.15);\n  z-index: 10;\n}\n\n.user-message .message-content {\n  background: linear-gradient(135deg, #0A84FF 0%, #5856D6 100%);\n  color: #FFFFFF;\n  border-bottom-right-radius: 8rpx;\n  box-shadow: 0 4rpx 16rpx rgba(10, 132, 255, 0.3);\n  /* 添加消息出现动画 */\n  animation: slideInRight 0.3s ease-out;\n}\n\n.ai-message .message-content {\n  background: #FFFFFF;\n  color: #1D1D1F;\n  border-bottom-left-radius: 8rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.08);\n  border: 1rpx solid #F0F0F5;\n  /* 添加消息出现动画 */\n  animation: slideInLeft 0.3s ease-out;\n}\n\n/* 消息滑入动画 */\n@keyframes slideInRight {\n  from {\n    opacity: 0;\n    transform: translateX(50rpx);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-50rpx);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n/* 正在输入动画 */\n.typing-indicator {\n  display: flex;\n  gap: 12rpx;\n  padding: 32rpx 28rpx;\n}\n\n.typing-indicator .dot {\n  width: 12rpx;\n  height: 12rpx;\n  border-radius: 50%;\n  background: #C7C7CC;\n  animation: typing 1.4s infinite;\n}\n\n.typing-indicator .dot:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.typing-indicator .dot:nth-child(3) {\n  animation-delay: 0.4s;\n}\n\n@keyframes typing {\n  0%, 60%, 100% {\n    transform: translateY(0);\n    opacity: 0.5;\n  }\n  30% {\n    transform: translateY(-12rpx);\n    opacity: 1;\n  }\n}\n\n/* 输入框 */\n.input-bar {\n  background: #FFFFFF;\n  padding: 24rpx;\n  /* 底部安全区域 */\n  padding-bottom: calc(24rpx + constant(safe-area-inset-bottom));\n  padding-bottom: calc(24rpx + env(safe-area-inset-bottom));\n  border-top: 1rpx solid #E5E5EA;\n  box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.05);\n  /* 固定在底部，支持键盘避让 */\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 100;\n}\n\n.input-wrapper {\n  display: flex;\n  flex-direction: column;\n  background: #F5F5F7;\n  border-radius: 24rpx;\n  padding: 16rpx 20rpx;\n}\n\n.input-field {\n  width: 100%;\n  min-height: 80rpx;\n  max-height: 200rpx;\n  font-size: 30rpx;\n  line-height: 1.6;\n  color: #1D1D1F;\n  background: transparent;\n}\n\n.input-actions {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 12rpx;\n}\n\n.char-count {\n  font-size: 24rpx;\n  color: #86868B;\n}\n\n.send-btn {\n  width: 64rpx;\n  height: 64rpx;\n  border-radius: 50%;\n  background: #0A84FF;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  transition: all 0.3s ease;\n}\n\n.send-btn:disabled {\n  background: #C7C7CC;\n  opacity: 0.5;\n}\n\n.send-btn:active:not(:disabled) {\n  transform: scale(0.95);\n}\n\n/* 输入工具栏 */\n.input-toolbar {\n  display: flex;\n  align-items: center;\n  padding-bottom: 8rpx;\n}\n\n.toolbar-btn {\n  width: 56rpx;\n  height: 56rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  transition: background 0.2s ease;\n}\n\n.toolbar-btn:active {\n  background: rgba(0, 0, 0, 0.05);\n}\n\n/* 表情选择器 */\n.emoji-picker {\n  width: 100%;\n  background: #F9FAFB;\n  border-top: 1rpx solid #E5E5EA;\n  padding: 24rpx 16rpx;\n  max-height: 400rpx;\n  overflow-y: scroll;\n  border-radius: 24rpx 24rpx 0 0;\n}\n\n.emoji-grid {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  gap: 16rpx;\n}\n\n.emoji-item {\n  width: 64rpx;\n  height: 64rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 48rpx;\n  border-radius: 12rpx;\n  transition: all 0.2s ease;\n}\n\n.emoji-item:active {\n  background: #E5E5EA;\n  transform: scale(1.2);\n}\n\n/* 会话弹窗 */\n.session-popup {\n  background: #FFFFFF;\n  border-radius: 24rpx 24rpx 0 0;\n  max-height: 80vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.popup-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 32rpx;\n  border-bottom: 1rpx solid #E5E5EA;\n}\n\n.popup-title {\n  font-size: 32rpx;\n  font-weight: 600;\n  color: #1D1D1F;\n}\n\n.popup-close {\n  width: 48rpx;\n  height: 48rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background: #F5F5F7;\n  transition: all 0.2s ease;\n}\n\n.popup-close:active {\n  transform: scale(0.95);\n  background: #E5E5EA;\n}\n\n.session-list {\n  flex: 1;\n  padding: 16rpx 0;\n  max-height: 600rpx;\n}\n\n.session-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 24rpx 32rpx;\n  transition: background 0.2s ease;\n}\n\n.session-item:active {\n  background: #F5F5F7;\n}\n\n.session-item.active {\n  background: #F0F9FF;\n  border-left: 4rpx solid #0A84FF;\n}\n\n.session-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 8rpx;\n}\n\n.session-item .session-name {\n  font-size: 28rpx;\n  color: #1D1D1F;\n  font-weight: 500;\n  max-width: 400rpx;\n}\n\n.session-time {\n  font-size: 24rpx;\n  color: #8E8E93;\n}\n\n.session-actions {\n  display: flex;\n  align-items: center;\n  gap: 16rpx;\n}\n\n.action-icon {\n  width: 56rpx;\n  height: 56rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background: #F5F5F7;\n  transition: all 0.2s ease;\n}\n\n.action-icon:active {\n  transform: scale(0.9);\n  background: #E5E5EA;\n}\n\n/* AI人格选择器 */\n.personality-btn {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.personality-icon {\n  font-size: 20px;\n}\n\n.personality-popup {\n  background: #FFFFFF;\n  border-radius: 24rpx 24rpx 0 0;\n  max-height: 80vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.personality-list {\n  flex: 1;\n  padding: 16rpx 0;\n  max-height: 400rpx;\n  overflow-y: auto;\n}\n\n.personality-item {\n  display: flex;\n  align-items: center;\n  padding: 24rpx 32rpx;\n  transition: background 0.2s ease;\n  gap: 20rpx;\n}\n\n.personality-item:active {\n  background: #F5F5F7;\n}\n\n.personality-item.active {\n  background: #F0F9FF;\n  border-left: 4rpx solid #0A84FF;\n}\n\n.personality-icon-large {\n  font-size: 48rpx;\n  min-width: 60rpx;\n  text-align: center;\n}\n\n.personality-info {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 6rpx;\n}\n\n.personality-name {\n  font-size: 30rpx;\n  color: #1D1D1F;\n  font-weight: 600;\n}\n\n.personality-desc {\n  font-size: 24rpx;\n  color: #8E8E93;\n  line-height: 1.4;\n}\n\n.personality-check {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.personality-examples {\n  padding: 24rpx 32rpx;\n  background: #F9FAFB;\n  border-top: 1rpx solid #E5E5EA;\n  max-height: 300rpx;\n  overflow-y: auto;\n}\n\n.examples-title {\n  font-size: 26rpx;\n  color: #6B7280;\n  font-weight: 600;\n  display: block;\n  margin-bottom: 16rpx;\n}\n\n.example-item {\n  padding: 16rpx 20rpx;\n  background: #FFFFFF;\n  border-radius: 12rpx;\n  margin-bottom: 12rpx;\n  border-left: 3rpx solid #667eea;\n}\n\n.example-text {\n  font-size: 24rpx;\n  color: #4B5563;\n  line-height: 1.6;\n}\n\n/* 系统消息样式 */\n.message-item .system-message {\n  display: flex;\n  justify-content: center;\n  padding: 16rpx 0;\n}\n\n.message-item .system-message text {\n  font-size: 24rpx;\n  color: #8E8E93;\n  font-style: italic;\n  padding: 8rpx 16rpx;\n  background: #F5F5F7;\n  border-radius: 16rpx;\n}\n</style>\n","import mod from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./chat.vue?vue&type=style&index=0&id=ccbcd004&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--6-oneOf-1-2!../../../HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./chat.vue?vue&type=style&index=0&id=ccbcd004&scoped=true&lang=css&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1760935126877\n      var cssReload = require(\"D:/HBuilderX.4.65.2025051206/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}